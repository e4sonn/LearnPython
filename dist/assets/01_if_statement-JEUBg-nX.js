const e='# Module 4: Control Flow - Conditional Statements - Lesson 1: The `if` Statement\n\nWelcome to Module 4, where we begin to explore **control flow**. Control flow refers to the order in which the statements in your program are executed. So far, our programs have mostly executed statements sequentially, one after the other. However, to write more powerful and flexible programs, we need ways to make decisions and repeat actions. Conditional statements allow us to do just that â€“ they enable our programs to execute different blocks of code based on whether certain conditions are true or false.\n\nThe most fundamental conditional statement in Python is the **`if` statement**.\n\n**What is an `if` Statement?**\n\nAn `if` statement allows you to execute a block of code only if a specified condition evaluates to `True`. If the condition is `False`, the block of code associated with the `if` statement is skipped, and the program continues with the next statement after the `if` block (if any).\n\n**Syntax of the `if` Statement**\n\nThe basic syntax of an `if` statement in Python is as follows:\n\n```python\nif condition:\n    # Block of code to execute if the condition is True\n    # This block MUST be indented\n    statement1\n    statement2\n    # ... more statements ...\n\n# Code here is outside the if block and will execute regardless\n```\n\nLet\'s break down the components:\n\n1.  **`if` Keyword**: The statement begins with the keyword `if`.\n2.  **`condition`**: This is a Boolean expression (an expression that evaluates to either `True` or `False`). It often involves comparison operators (`==`, `!=`, `>`, `<`, `>=`, `<=`) and logical operators (`and`, `or`, `not`) that we learned about in Module 3.\n3.  **Colon (`:`)**: The condition is followed by a colon. This colon is crucial and signifies the beginning of a code block that is dependent on the condition.\n4.  **Indented Code Block**: The lines of code that are to be executed if the condition is `True` must be indented. Python uses indentation (typically 4 spaces) to define code blocks. All statements within this block must have the same level of indentation. This indented block is sometimes called the "body" of the `if` statement.\n\n**How it Works**\n\n1.  Python evaluates the `condition`.\n2.  If the `condition` is `True`, the indented block of code following the `if` statement is executed.\n3.  If the `condition` is `False`, the indented block of code is skipped, and execution proceeds to the first statement after the `if` block (if any) that is not indented at the same level.\n\n**Examples of `if` Statements**\n\nLet\'s look at some practical examples:\n\n```python\n# Example 1: Checking age for voting\nage = 20\n\nif age >= 18:\n    print("You are eligible to vote.")\n    print("Please make sure you are registered.")\n\nprint("Program continues...") # This line executes regardless of the age condition\n\n# If age was 15, the two print statements inside the if block would be skipped.\n```\nIn this example, if `age` is 20 (which is `>= 18`), both `print` statements inside the `if` block will be executed. If `age` were, say, 15, the condition `15 >= 18` would be `False`, and those two `print` statements would be skipped. The final `print("Program continues...")` would execute in both cases because it\'s outside the `if` block.\n\n```python\n# Example 2: Checking temperature\ntemperature = 30 # degrees Celsius\n\nif temperature > 25:\n    print("It\'s a hot day!")\n    print("Remember to stay hydrated.")\n\n# Example 3: Checking if a string is not empty\nuser_name = input("Enter your name: ")\n\n# Using truthiness: a non-empty string is True in a Boolean context\nif user_name: # This is equivalent to: if user_name != "":\n    print(f"Hello, {user_name}!")\n\nif not user_name: # Checks if user_name is empty (Falsy)\n    print("You didn\'t enter a name.")\n```\n\n**Conditions in `if` Statements**\n\nThe condition in an `if` statement can be any expression that evaluates to a Boolean (`True` or `False`). This includes:\n\n*   Direct Boolean values: `if True:` (though this is usually for testing or when a condition is always met).\n*   Variables holding Boolean values: `is_active = True; if is_active:`\n*   Results of comparison operators: `if x > 10:`\n*   Results of logical operators: `if (age >= 18 and has_id_card):`\n*   Results of membership operators: `if item in my_list:`\n*   Results of identity operators: `if my_variable is None:`\n*   Function calls that return a Boolean: `if user_is_authenticated():`\n*   Any value evaluated in a Boolean context (truthiness/falsiness): `if my_list:` (True if `my_list` is not empty).\n\n```python\n# Example with a complex condition\nscore = 85\nattendance_percentage = 92\n\nif (score >= 70) and (attendance_percentage >= 80):\n    print("Congratulations! You have passed the module.")\n    print("Your dedication has paid off.")\n\n# Example with a function returning a Boolean\ndef is_even(number):\n    return number % 2 == 0\n\nnum = 6\nif is_even(num):\n    print(f"{num} is an even number.")\n```\n\n**Common Pitfalls**\n\n1.  **Forgetting the Colon (`:`)**: A common syntax error is forgetting the colon at the end of the `if condition:` line.\n2.  **Incorrect Indentation**: Python is strict about indentation. All lines within the `if` block must be indented consistently. Mixing spaces and tabs or having inconsistent indentation levels will lead to an `IndentationError`.\n    ```python\n    # Incorrect indentation - will cause an error\n    # if x > 5:\n    # print("x is greater than 5") # Error: expected an indented block\n    ```\n3.  **Using Assignment (`=`) instead of Comparison (`==`)**: A very common mistake for beginners is using a single equals sign (`=`) for comparison, which is actually the assignment operator.\n    ```python\n    # Incorrect: This assigns 10 to x and then checks truthiness of 10 (which is True)\n    # if x = 10: # This is a syntax error in Python 3.8+ in if statements, but a logical error in older versions\n    #    print("x is 10")\n\n    # Correct:\n    x = 5\n    if x == 10: # Compares if x is equal to 10\n        print("x is 10")\n    else:\n        print("x is not 10")\n    ```\n    Fortunately, Python 3.8 and later often raise a `SyntaxError` if you use an assignment operator directly as the condition in an `if` statement (unless it\'s wrapped in parentheses, which is sometimes done for assignment expressions using the walrus operator `:=`, a more advanced feature).\n\n**Conclusion**\n\nThe `if` statement is the simplest way to introduce decision-making into your Python programs. It allows you to conditionally execute a block of code based on whether a specific condition is `True`. Mastering the syntax, especially the colon and indentation, is crucial. In the next lessons, we will build upon the `if` statement by introducing `else` and `elif` clauses to handle more complex conditional logic and provide alternative paths of execution.\n';export{e as default};
