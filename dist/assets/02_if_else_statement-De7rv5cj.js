const e='# Module 4: Control Flow - Conditional Statements - Lesson 2: The `if-else` Statement\n\nIn the previous lesson, we learned about the `if` statement, which allows us to execute a block of code only when a certain condition is `True`. However, often we want to perform one action if a condition is true and a *different* action if the condition is false. This is where the **`if-else` statement** comes into play.\n\n**What is an `if-else` Statement?**\n\nThe `if-else` statement provides an alternative path of execution when the condition in the `if` part evaluates to `False`. If the condition is `True`, the code block under `if` is executed. If the condition is `False`, the code block under `else` is executed.\n\n**Syntax of the `if-else` Statement**\n\nThe basic syntax is as follows:\n\n```python\nif condition:\n    # Block of code to execute if the condition is True\n    # This block MUST be indented\n    statement1_if_true\n    statement2_if_true\n    # ...\nelse:\n    # Block of code to execute if the condition is False\n    # This block MUST also be indented\n    statement1_if_false\n    statement2_if_false\n    # ...\n\n# Code here is outside the if-else structure and executes afterwards\n```\n\nKey components:\n\n1.  **`if condition:`**: Same as the simple `if` statement. It starts with the `if` keyword, followed by a condition and a colon.\n2.  **Indented `if` Block**: The code to be executed if the `condition` is `True`.\n3.  **`else:` Keyword**: Following the `if` block (at the same indentation level as the `if` keyword), the `else` keyword is used, followed by a colon. The `else` clause does not have its own condition; it executes when the `if` condition is `False`.\n4.  **Indented `else` Block**: The code to be executed if the `condition` in the `if` statement is `False`.\n\nExactly one of the two blocks (either the `if` block or the `else` block) will be executed.\n\n**How it Works**\n\n1.  Python evaluates the `condition` associated with the `if` statement.\n2.  If the `condition` is `True`, the indented code block under the `if` is executed, and the `else` block is skipped.\n3.  If the `condition` is `False`, the indented code block under the `if` is skipped, and the indented code block under the `else` is executed.\n4.  After either block has finished executing, the program continues with the next statement after the entire `if-else` structure.\n\n**Examples of `if-else` Statements**\n\nLet\'s see how `if-else` provides alternative execution paths:\n\n```python\n# Example 1: Checking if a number is even or odd\nnumber = 7\n\nif number % 2 == 0:  # Condition: Is the remainder when divided by 2 zero?\n    print(f"{number} is an even number.")\nelse:\n    print(f"{number} is an odd number.")\n\n# If number was 6, the output would be "6 is an even number."\n# Since number is 7, the output is "7 is an odd number."\n```\n\n```python\n# Example 2: Granting or denying access based on age\nuser_age = 16\nminimum_age_for_access = 18\n\nif user_age >= minimum_age_for_access:\n    print("Access granted. Welcome!")\nelse:\n    print("Access denied. You must be at least " + str(minimum_age_for_access) + " years old.")\n    # We use str() to concatenate the integer with strings\n\n# Output for user_age = 16: "Access denied. You must be at least 18 years old."\n```\n\n```python\n# Example 3: Checking login credentials (simplified)\ncorrect_password = "Python123"\nentered_password = input("Enter your password: ")\n\nif entered_password == correct_password:\n    print("Login successful!")\nelse:\n    print("Incorrect password. Please try again.")\n```\nIn this login example, if the `entered_password` matches `correct_password`, the success message is printed. Otherwise (if they don\'t match), the error message is printed.\n\n**The `else` Clause is Optional**\n\nAs we saw in the previous lesson, the `else` clause is optional. If you only need to do something when a condition is true and nothing specific when it\'s false, you can just use a simple `if` statement.\nThe `if-else` structure is used when you have two distinct paths of execution based on a single condition.\n\n**Clarity and Readability**\n\nThe `if-else` statement makes the logic of your program very clear: "If this condition holds, do this; otherwise, do that." This structure is fundamental to programming and is used extensively to handle different scenarios.\n\n**Common Use Cases**\n\n*   **Validating input:** Checking if user input is valid and providing different feedback.\n*   **Making choices:** Deciding between two different actions based on a criterion.\n*   **Setting default values:** If a condition isn\'t met, assign a default value.\n*   **Error handling (simple cases):** Performing an action or reporting an error.\n\n```python\n# Example: Setting a discount\norder_total = 150 # dollars\ndiscount_threshold = 100\ndiscount_rate = 0.10 # 10% discount\nfinal_price = order_total\n\nif order_total >= discount_threshold:\n    discount_amount = order_total * discount_rate\n    final_price = order_total - discount_amount\n    print(f"Discount applied: ${discount_amount:.2f}")\nelse:\n    print("No discount applied for orders under $" + str(discount_threshold) + ".")\n\nprint(f"Your final price is: ${final_price:.2f}")\n```\n\n**Important Reminders**\n\n*   **Colon (`:`)**: Don\'t forget the colons after the `if condition` and after the `else` keyword.\n*   **Indentation**: Consistent indentation for both the `if` block and the `else` block is mandatory. Python relies on it to understand the structure of your code.\n\n**Conclusion**\n\nThe `if-else` statement significantly enhances our ability to control program flow by providing two distinct execution paths based on a Boolean condition. It allows programs to respond differently to various situations, making them more dynamic and intelligent. While `if` handles a single conditional path, `if-else` provides a clear way to specify an alternative action when the initial condition is not met. In the next lesson, we will explore how to handle more than two possible outcomes using the `if-elif-else` statement.\n';export{e as default};
